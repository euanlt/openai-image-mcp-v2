#!/usr/bin/env node

// IMMEDIATE PROCESS LOGGING - BEFORE ANY IMPORTS
process.stdout.write("🔥 BINARY PROCESS STARTED - PID: " + process.pid + "\n");
process.stdout.write("📅 BINARY START TIME: " + new Date().toISOString() + "\n");
process.stdout.write("🌍 BINARY ENVIRONMENT: " + (process.env.RENDER ? "Render" : "Local") + "\n");

// BYPASS SHEBANG PERMISSION ISSUES
// Directly execute the main script with explicit node call
// This avoids file permission problems with GitHub tarballs

const path = require('path');
const { execSync } = require('child_process');

console.log("🚀 MCP Binary Wrapper Starting...");
console.log("📅 Timestamp:", new Date().toISOString());
console.log("🔧 Bypassing shebang permission issues...");

try {
  // Get the directory where this script is located
  const binDir = __dirname;
  // Go up one level to the package root, then into dist
  const scriptPath = path.join(binDir, '..', 'dist', 'index.js');
  
  console.log("📁 Script path:", scriptPath);
  console.log("🎯 Executing with explicit node call...");
  
  // Execute with explicit node command to bypass permission issues
  // Use execSync with stdio: 'inherit' to maintain STDIO communication
  execSync(`node "${scriptPath}"`, {
    stdio: 'inherit',
    env: process.env
  });
  
} catch (error) {
  console.error("❌ Failed to start MCP server:", error.message);
  process.exit(1);
}
